import java.lang.invoke.MethodHandles;
import java.io.File;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Optional;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.imageio.ImageIO;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.chart.XYChart;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.image.WritableImage;
import javafx.collections.ObservableList;
import javafx.collections.FXCollections;
import javafx.embed.swing.SwingFXUtils;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.HelpFormatter;

import jp.ac.kyoto_u.kuis.le4music.Le4MusicUtils;
import jp.ac.kyoto_u.kuis.le4music.LineChartWithSpectrogram;

import java.io.IOException;
import javax.sound.sampled.UnsupportedAudioFileException;
import org.apache.commons.cli.ParseException;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.util.MathArrays;

public final class PlotYesNoCLI extends Application {

    private static final Options options = new Options();
    private static final String helpMessage =
        MethodHandles.lookup().lookupClass().getName()+" [OPTIONS] <WAVFILE>";

    static {
        /* コマンドラインオプション定義*/
        options.addOption("h", "help", false, "Display this help and exit");
        options.addOption("o", "outfile", true,
                          "Output image file (Default: " +
                          MethodHandles.lookup().lookupClass().getSimpleName() +
                          "." + Le4MusicUtils.outputImageExt + ")");
        options.addOption("a", "amp-bounds", true,
                          "Upper(+) and lower(-) bounds in the amplitude direction " +
                          "(Default: " + Le4MusicUtils.waveformAmplitudeBounds + ")");
    }

   @Override
    public final void start(final Stage primaryStage)
        throws IOException,
                UnsupportedAudioFileException,
                ParseException {
            /* コマンドライン引数処理*/
            final String[] args = getParameters().getRaw().toArray(new String[0]);
            final CommandLine cmd = new DefaultParser().parse(options, args);
            if (cmd.hasOption("help")) {
                new HelpFormatter().printHelp(helpMessage, options);
                Platform.exit();
                return;
        }
        final String[] pargs = cmd.getArgs();
        if (pargs.length < 1) {
            System.out.println("WAVFILE is not given.");
            new HelpFormatter().printHelp(helpMessage, options);
            Platform.exit();
            return;
        }
        final File wavFile = new File(pargs[0]);

        /* W A V ファイル読み込み*/
        final AudioInputStream stream = AudioSystem.getAudioInputStream(wavFile);
        final double[] waveform = Le4MusicUtils.readWaveformMonaural(stream);
        final AudioFormat format = stream.getFormat();
        final double sampleRate = format.getSampleRate();
        final double nyquist = sampleRate * 0.5;
        stream.close();
        
        /* 窓関数とFFTのサンプル数 */
        final double frameDuration = Optional.ofNullable(cmd.getOptionValue("frame")).map(Double::parseDouble)
                .orElse(Le4MusicUtils.frameDuration);
        final int frameSize = (int) Math.round(frameDuration * sampleRate);
        final int fftSize = 1 << Le4MusicUtils.nextPow2(frameSize);
        final int fftSize2 = (fftSize >> 1) + 1;

        /* シフトのサンプル数 */
        final double shiftDuration = Optional.ofNullable(cmd.getOptionValue("shift")).map(Double::parseDouble)
                .orElse(Le4MusicUtils.frameDuration / 8);
        final int shiftSize = (int) Math.round(shiftDuration * sampleRate);

        /* 窓関数を求め， それを正規化する */
        final double[] window = MathArrays.normalizeArray(Arrays.copyOf(Le4MusicUtils.hanning(frameSize), fftSize),
                1.0);

        /* 短時間フーリエ変換本体 */
        final Stream<Complex[]> spectrogram = Le4MusicUtils.sliding(waveform, window, shiftSize)
                .map(frame -> Le4MusicUtils.rfft(frame));

        /* 複素スペクトログラムを対数振幅スペクトログラムに */
        double[][] specLog = spectrogram.map(sp -> Arrays.stream(sp).mapToDouble(c -> c.abs()).toArray())
                .toArray(n -> new double[n][]);
        
        /* 短時間フーリエ変換本体 */
        final Stream<Complex[]> spectrogram1 = Le4MusicUtils.sliding(waveform, window, shiftSize)
                .map(frame -> Le4MusicUtils.rfft(frame));

        /* 複素スペクトログラムを対数振幅スペクトログラムに */
        final double[][] specLog1 = spectrogram1.map(sp -> Arrays.stream(sp).mapToDouble(c -> 20.0 * Math.log10(c.abs())).toArray())
                .toArray(n -> new double[n][]);
        
        final Stream<Complex[]> spectrogram2 = Le4MusicUtils.sliding(waveform, window, shiftSize)
                .map(frame -> Le4MusicUtils.rfft(frame));

        final double[][] specLog2 = spectrogram2.map(sp -> Arrays.stream(sp).mapToDouble(c -> c.getReal()).toArray()).toArray(n -> new double[n][]);

        
        /* 参考： フレーム数と各フレーム先頭位置の時刻 */
        final double[] times = IntStream.range(0, specLog.length).mapToDouble(i -> i * shiftDuration).toArray();
        
        /* 参考： 各フーリエ変換係数に対応する周波数 */
        final double[] freqs = IntStream.range(0, fftSize2).mapToDouble(i -> i * sampleRate / fftSize).toArray();
        
        final int  N = waveform.length; //80000
        final int interval = frameSize / 6; //25
        double[] new_freq = new double [N];
        final double lowerf0 = Le4MusicUtils.f0LowerBound;
        final double upperf0 = 400;
        final double[] max = new double[N];
        final double[] index = new double[N];
        for(int i = 0; i < N - frameSize; i += interval) {
        	max[(Math.abs(i - frameSize) / interval)] = waveform[0];
        	for(int j = i; j < frameSize + i; j++) {
        		if(j != 0 && waveform[j] > max[(Math.abs(i - frameSize) / interval)]
        		                               && sampleRate / (j - i) > lowerf0 && upperf0 > sampleRate / (j - i)) {
        				max[(Math.abs(i - frameSize) / interval)] = waveform[j];
        				index[(Math.abs(i - frameSize) / interval)] = j;
        			max[(Math.abs(i - frameSize) / interval)] = waveform[j];
        			index[(Math.abs(i - frameSize) / interval)] = j-i;
        		}
        	}
//    	System.out.println(max[(Math.abs(i - frameSize) / interval)] + ", " + index[(Math.abs(i - frameSize) / interval)]);
        }
        
        System.out.println("the size is " + max.length);
        for(int i = 0; i < index.length; i++) {
        	if(index[i] != 0) {
        		index[i] = sampleRate / index[i];
        		
        		System.out.println(index[i]);
        	}
        }
        System.out.print(sampleRate);
        
        
        
//        for (int i = 0; i < 25; i+=interval) {//
//        		for (int j = 0; j < frameSize; j++) {
//        			if((i * frameSize + j) * sampleRate / fftSize < upperf0 && (i * frameSize + j) * sampleRate / fftSize > lowerf0 && waveform[i * frameSize + j] > f0[i]) {
//        				new_freq[i] = j + frameSize * i;
//        				System.out.println("ok, " + new_freq[i]);
//        			}
//        		}
//        }
//        
//        for(int i = 0; i < new_freq.length; i ++) {
//        	int zero_cross = 0;
//        	for(int j = 0; j < frameSize-1; j++) {
//        		if(waveform[i * frameSize + j] * waveform[i * frameSize + j + 1] < 0 && i * frameSize + j + 1 < waveform.length) {
//        			zero_cross += 1;
//        		}
//        	}
//        	System.out.println(zero_cross);
//        	if(zero_cross >= 2 * new_freq[i] * sampleRate / fftSize) {
//        		new_freq[i] = 0;
//        		System.out.println("changes");
//        	}
//        	System.out.print(i + " : " + new_freq[i] * sampleRate / fftSize); //*= 84
//        	
//        }
        
        /* データ系列を作成*/
        final ObservableList<XYChart.Data<Number, Number>> data =
            IntStream.range(0, max.length)
                    .mapToObj(i -> new XYChart.Data<Number, Number>(i * shiftDuration, index[i]))
                    .collect(Collectors.toCollection(FXCollections::observableArrayList));

        /* データ系列に名前をつける*/
        final XYChart.Series<Number, Number> series = new XYChart.Series<>("Waveform", data);

        
        /* X 軸を作成*/
        final double duration = (waveform.length - 1) / sampleRate;
        final NumberAxis xAxis = new NumberAxis(
            /* axisLabel = */ "Time (seconds)",
            /* lowerBound = */ 0.0,
            /* upperBound = */ duration,
            /* tickUnit = */ Le4MusicUtils.autoTickUnit(duration)
        );
        xAxis.setAnimated(false);

        /* Y 軸を作成*/
        final NumberAxis yAxis = new NumberAxis(/* axisLabel = */ "Frequency (Hz)", /* lowerBound = */ 0.0,
                /* upperBound = */ 600, /* tickUnit = */ Le4MusicUtils.autoTickUnit(600));
        yAxis.setAnimated(false);

        /* チャートを作成*/
        final LineChartWithSpectrogram<Number, Number> chart = new LineChartWithSpectrogram<>(xAxis, yAxis);
        chart.setParameters(specLog.length, fftSize2, nyquist);
        Arrays.stream(specLog1).forEach(chart::addSpecLog);
        chart.setTitle("f0" + " " + pargs[0]);
        chart.setCreateSymbols(false);
        chart.setLegendVisible(false);
        chart.getData().add(series);

        /* グラフ描画*/
        final Scene scene = new Scene(chart, 800, 600);
        scene.getStylesheets().add("le4music.css");

        /* ウインドウ表示*/
        primaryStage.setScene(scene);
        primaryStage.setTitle(getClass().getName());
        primaryStage.show();

        /* チャートを画像ファイルへ出力 */
        Platform.runLater(() -> {
            final String[] name_ext = Le4MusicUtils.getFilenameWithImageExt(
                    Optional.ofNullable(cmd.getOptionValue("outfile")), getClass().getSimpleName());
            final WritableImage image = scene.snapshot(null);
            try {
                ImageIO.write(SwingFXUtils.fromFXImage(image, null), name_ext[1],
                        new File(name_ext[0] + "." + name_ext[1]));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

}